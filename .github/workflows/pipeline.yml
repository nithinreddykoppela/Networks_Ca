name: CI/CD Pipeline for Terraform and Ansible

on:
  push:
    branches:
      - main  # Trigger pipeline when code is pushed to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set AWS Credentials
    - name: Set AWS Credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

    # Step 3: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'

 # Step 4: Terraform Init - Initialize Terraform configuration
    - name: Terraform Init 
      run: terraform init

    # Step 5: Terraform Apply - Apply the Terraform configuration to provision the infrastructure
    - name: Terraform Apply
      run: terraform apply -auto-approve

    # Step 6: Get EC2 Public IP and create hosts.ini file for Ansible
    - name: Get EC2 Public IP and create hosts.ini file for Ansible
      run: |
        EC2_PUBLIC_IP=$(terraform output -raw instance_public_ip)
        if [ -z "$EC2_PUBLIC_IP" ]; then
          echo "Error: EC2_PUBLIC_IP is not set."
          exit 1
        fi
        echo "[web_servers]" > hosts.ini
        echo "$EC2_PUBLIC_IP ansible_ssh_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> hosts.ini
        cat hosts.ini

    - name: setup private key and known hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh

        # Check if EC2 host is already in known_hosts; if not, add it
        ssh-keygen -F $EC2_PUBLIC_IP || ssh-keyscan -v -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts

        # Ensure private key is correctly passed from GitHub secrets
        echo "${{ secrets.PEM }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Debugging: List files and check known_hosts
        ls -l ~/.ssh
        cat ~/.ssh/known_hosts

    # Step 8: Install Ansible on the GitHub Actions runner
    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible

    # Step 9: (Optional) Verify the SSH connection using Ansible
    - name: Test SSH Connection
      run: |
        ansible -i hosts.ini web_servers -m ping --private-key ~/.ssh/id_rsa
        
    # Step 10: Run Ansible Playbook to install Docker on the EC2 instance
    - name: Run Ansible Playbook
      run: |
        ansible-playbook -i hosts.ini docker.yml 

    # Step 11: (Optional) Destroy Terraform-managed resources after the pipeline runs
    - name: Terraform Destroy (Optional)
      run: terraform destroy -auto-approve
      if: github.event_name == 'push' && github.event.head_commit.message == 'destroy'
  


